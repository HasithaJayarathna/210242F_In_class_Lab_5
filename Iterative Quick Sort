/*Iterative quick sort algorithm for a given number of elements to generate a random array and check the execution time of the quickSort function*/
#include <bits/stdc++.h>
#include <chrono>
#include <ctime>

using namespace std;
using namespace std::chrono;

void swap(int* a, int* b){
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int A[], int p, int r){
    int x = A[r];
    int i = (p - 1);
    for (int j = p; j <= r - 1; j++) {
        if (A[j] <= x) {
            i++;
            swap(&A[i], &A[j]);
        }
    }
    swap(&A[i + 1], &A[r]);
    return (i + 1);
}


void IterativequickSort(int A[], int p, int r){
    int stack[r - p + 1];

    int top = -1;

    stack[++top] = p;
    stack[++top] = r;

    while (top >= 0) {
        r = stack[top--];
        p = stack[top--];

        int q = partition(A, p, r);

        if (q - 1 > p) {
            stack[++top] = p;
            stack[++top] = q - 1;
        }

        if (p + 1 < r) {
            stack[++top] = q + 1;
            stack[++top] = r;
        }
    }
}

int main()
{
    int n;
    cout << "Enter number of elements," << endl;
    cin >> n;
    int a[n];
    srand(time(NULL));
    for (int i = 0; i <n ;i++){
        a[i] = (rand()%n) + 1;
    }
    auto start = steady_clock::now();
    IterativequickSort(a, 0, n - 1 );
    auto finish = steady_clock::now();
    auto dur = finish - start;
    for (int i = 0; i < n; ++i){
        cout << a[i] << " ";
    }
    cout << endl;
    cout << duration_cast<nanoseconds>(dur).count() << endl;
    return 0;
}
